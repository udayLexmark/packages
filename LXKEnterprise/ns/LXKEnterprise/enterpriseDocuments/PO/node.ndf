<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <record name="record" javaclass="com.wm.util.Values">
    <value name="node_type">record</value>
    <value name="node_subtype">unknown</value>
    <value name="node_nsName">LXKEnterprise.enterpriseDocuments:PO</value>
    <value name="node_pkg">LXKEnterprise</value>
    <record name="node_hints" javaclass="com.wm.util.Values">
      <array name="CURRENT_NODE" type="value" depth="1">
        <value>/Data;2;0</value>
        <value>/Data;2;0/POHeader;4;0;LXKEnterprise.enterpriseDocuments.support:POHeader</value>
        <value>/Data;2;0/POHeader;4;0;LXKEnterprise.enterpriseDocuments.support:POHeader/OrderLanguage;1;0</value>
      </array>
    </record>
    <value name="is_public">false</value>
    <value name="field_type">record</value>
    <value name="field_dim">0</value>
    <value name="nillable">true</value>
    <value name="form_qualified">false</value>
    <value name="is_global">false</value>
    <number name="nanostamp" type="Long">2491054873911325</number>
    <array name="rec_fields" type="record" depth="1">
      <record javaclass="com.wm.util.Values">
        <value name="node_type">record</value>
        <value name="node_subtype">unknown</value>
        <value name="node_comment"></value>
        <record name="node_hints" javaclass="com.wm.util.Values">
          <value name="field_largerEditor">false</value>
          <value name="field_password">false</value>
        </record>
        <value name="is_public">false</value>
        <value name="field_name">MetaData</value>
        <value name="field_type">recref</value>
        <value name="field_dim">0</value>
        <value name="nillable">true</value>
        <value name="form_qualified">false</value>
        <value name="is_global">false</value>
        <value name="rec_closed">true</value>
        <value name="modifiable">true</value>
        <value name="rec_ref">LXKEnterprise.enterpriseDocuments.support:MetaData</value>
      </record>
      <record javaclass="com.wm.util.Values">
        <value name="node_type">record</value>
        <value name="node_subtype">unknown</value>
        <value name="node_comment"></value>
        <record name="node_hints" javaclass="com.wm.util.Values">
          <value name="field_largerEditor">false</value>
          <value name="field_password">false</value>
        </record>
        <value name="is_public">false</value>
        <value name="field_name">Data</value>
        <value name="field_type">record</value>
        <value name="field_dim">0</value>
        <value name="field_opt">true</value>
        <value name="nillable">true</value>
        <value name="form_qualified">false</value>
        <value name="is_global">false</value>
        <array name="rec_fields" type="record" depth="1">
          <record javaclass="com.wm.util.Values">
            <value name="node_type">record</value>
            <value name="node_subtype">unknown</value>
            <value name="node_comment"></value>
            <record name="node_hints" javaclass="com.wm.util.Values">
              <value name="field_largerEditor">false</value>
              <value name="field_password">false</value>
            </record>
            <value name="is_public">false</value>
            <value name="field_name">POHeader</value>
            <value name="field_type">recref</value>
            <value name="field_dim">0</value>
            <value name="field_opt">true</value>
            <value name="nillable">true</value>
            <value name="form_qualified">false</value>
            <value name="is_global">false</value>
            <value name="rec_closed">true</value>
            <value name="modifiable">true</value>
            <value name="rec_ref">LXKEnterprise.enterpriseDocuments.support:POHeader</value>
          </record>
          <record javaclass="com.wm.util.Values">
            <value name="node_type">record</value>
            <value name="node_subtype">unknown</value>
            <value name="node_comment"></value>
            <record name="node_hints" javaclass="com.wm.util.Values">
              <value name="field_largerEditor">false</value>
              <value name="field_password">false</value>
            </record>
            <value name="is_public">false</value>
            <value name="field_name">POLineItems</value>
            <value name="field_type">recref</value>
            <value name="field_dim">1</value>
            <value name="field_opt">true</value>
            <value name="nillable">true</value>
            <value name="form_qualified">false</value>
            <value name="is_global">false</value>
            <value name="is_soap_array_encoding_used">true</value>
            <value name="rec_closed">true</value>
            <value name="modifiable">true</value>
            <value name="rec_ref">LXKEnterprise.enterpriseDocuments.support:POLineItem</value>
          </record>
        </array>
        <value name="rec_closed">true</value>
        <value name="modifiable">true</value>
      </record>
      <record javaclass="com.wm.util.Values">
        <value name="node_type">record</value>
        <value name="node_subtype">unknown</value>
        <value name="is_public">false</value>
        <value name="field_name">_env</value>
        <value name="field_type">recref</value>
        <value name="field_dim">0</value>
        <value name="field_opt">true</value>
        <value name="nillable">true</value>
        <value name="form_qualified">false</value>
        <value name="is_global">false</value>
        <value name="modifiable">true</value>
        <value name="rec_ref">pub.publish:envelope</value>
      </record>
    </array>
    <record name="eventDescription" javaclass="com.wm.util.Values">
      <value name="brokerEventTypeName">wm::is::LXKEnterprise::enterpriseDocuments::PO</value>
      <value name="timeToLive">2592000</value>
      <value name="storageType">guaranteed</value>
      <value name="clientValidation">true</value>
      <Boolean name="enableProtoBuf">true</Boolean>
      <byte name="protoBufDescriptor">
      </byte>
    </record>
    <value name="modifiable">true</value>
  </record>
</Values>
